# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fullduplex_swig', [dirname(__file__)])
        except ImportError:
            import _fullduplex_swig
            return _fullduplex_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_fullduplex_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fullduplex_swig = swig_import_helper()
    del swig_import_helper
else:
    import _fullduplex_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _fullduplex_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _fullduplex_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _fullduplex_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _fullduplex_swig.high_res_timer_epoch()
class packet_decap(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::packet_decap.

    To avoid accidental use of raw pointers, fullduplex::packet_decap's constructor is in a private implementation class. fullduplex::packet_decap::make is the public interface for creating new instances.

    Args:
        debug : 
        sig_pilot_pos : 
        pad_front : 
        delay_tx2rx : 
        frame_len : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """
        make(bool debug=False, unsigned int sig_pilot_pos=0, unsigned int pad_front=0, unsigned int delay_tx2rx=0, unsigned int frame_len=0, std::string const & len_tag_key) -> packet_decap_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::packet_decap.

        To avoid accidental use of raw pointers, fullduplex::packet_decap's constructor is in a private implementation class. fullduplex::packet_decap::make is the public interface for creating new instances.

        Args:
            debug : 
            sig_pilot_pos : 
            pad_front : 
            delay_tx2rx : 
            frame_len : 
            len_tag_key : 
        """
        return _fullduplex_swig.packet_decap_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _fullduplex_swig.delete_packet_decap
    __del__ = lambda self: None
packet_decap_swigregister = _fullduplex_swig.packet_decap_swigregister
packet_decap_swigregister(packet_decap)

def packet_decap_make(*args, **kwargs):
    """
    packet_decap_make(bool debug=False, unsigned int sig_pilot_pos=0, unsigned int pad_front=0, unsigned int delay_tx2rx=0, unsigned int frame_len=0, std::string const & len_tag_key) -> packet_decap_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::packet_decap.

    To avoid accidental use of raw pointers, fullduplex::packet_decap's constructor is in a private implementation class. fullduplex::packet_decap::make is the public interface for creating new instances.

    Args:
        debug : 
        sig_pilot_pos : 
        pad_front : 
        delay_tx2rx : 
        frame_len : 
        len_tag_key : 
    """
    return _fullduplex_swig.packet_decap_make(*args, **kwargs)

class packet_decap_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::packet_decap)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::packet_decap)> self) -> packet_decap_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::packet_decap)> self, packet_decap p) -> packet_decap_sptr
        """
        this = _fullduplex_swig.new_packet_decap_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_decap_sptr self) -> packet_decap"""
        return _fullduplex_swig.packet_decap_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_packet_decap_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """
        make(packet_decap_sptr self, bool debug=False, unsigned int sig_pilot_pos=0, unsigned int pad_front=0, unsigned int delay_tx2rx=0, unsigned int frame_len=0, std::string const & len_tag_key) -> packet_decap_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::packet_decap.

        To avoid accidental use of raw pointers, fullduplex::packet_decap's constructor is in a private implementation class. fullduplex::packet_decap::make is the public interface for creating new instances.

        Args:
            debug : 
            sig_pilot_pos : 
            pad_front : 
            delay_tx2rx : 
            frame_len : 
            len_tag_key : 
        """
        return _fullduplex_swig.packet_decap_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(packet_decap_sptr self) -> unsigned int"""
        return _fullduplex_swig.packet_decap_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_decap_sptr self, int which, int delay)
        declare_sample_delay(packet_decap_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.packet_decap_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_decap_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.packet_decap_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_decap_sptr self) -> int"""
        return _fullduplex_swig.packet_decap_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_decap_sptr self) -> double"""
        return _fullduplex_swig.packet_decap_sptr_relative_rate(self)


    def start(self):
        """start(packet_decap_sptr self) -> bool"""
        return _fullduplex_swig.packet_decap_sptr_start(self)


    def stop(self):
        """stop(packet_decap_sptr self) -> bool"""
        return _fullduplex_swig.packet_decap_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_decap_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.packet_decap_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_decap_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.packet_decap_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_decap_sptr self) -> int"""
        return _fullduplex_swig.packet_decap_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_decap_sptr self, int m)"""
        return _fullduplex_swig.packet_decap_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_decap_sptr self)"""
        return _fullduplex_swig.packet_decap_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_decap_sptr self) -> bool"""
        return _fullduplex_swig.packet_decap_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_decap_sptr self, int m)"""
        return _fullduplex_swig.packet_decap_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_decap_sptr self) -> int"""
        return _fullduplex_swig.packet_decap_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_decap_sptr self, int i) -> long"""
        return _fullduplex_swig.packet_decap_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_decap_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_decap_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.packet_decap_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_decap_sptr self, int i) -> long"""
        return _fullduplex_swig.packet_decap_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_decap_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_decap_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.packet_decap_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_decap_sptr self, int which) -> float
        pc_input_buffers_full(packet_decap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_decap_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_decap_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_decap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_decap_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_decap_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_decap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_decap_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_decap_sptr self, int which) -> float
        pc_output_buffers_full(packet_decap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_decap_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_decap_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_decap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_decap_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_decap_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_decap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_decap_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_decap_sptr self) -> float"""
        return _fullduplex_swig.packet_decap_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_decap_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.packet_decap_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_decap_sptr self)"""
        return _fullduplex_swig.packet_decap_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_decap_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.packet_decap_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_decap_sptr self) -> int"""
        return _fullduplex_swig.packet_decap_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_decap_sptr self) -> int"""
        return _fullduplex_swig.packet_decap_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_decap_sptr self, int priority) -> int"""
        return _fullduplex_swig.packet_decap_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_decap_sptr self) -> std::string"""
        return _fullduplex_swig.packet_decap_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_decap_sptr self) -> std::string"""
        return _fullduplex_swig.packet_decap_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_decap_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.packet_decap_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_decap_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.packet_decap_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_decap_sptr self) -> long"""
        return _fullduplex_swig.packet_decap_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_decap_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.packet_decap_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_decap_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.packet_decap_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_decap_sptr self) -> std::string"""
        return _fullduplex_swig.packet_decap_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_decap_sptr self, std::string name)"""
        return _fullduplex_swig.packet_decap_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_decap_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.packet_decap_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_decap_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.packet_decap_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_decap_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.packet_decap_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_decap_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.packet_decap_sptr_message_subscribers(self, which_port)

packet_decap_sptr_swigregister = _fullduplex_swig.packet_decap_sptr_swigregister
packet_decap_sptr_swigregister(packet_decap_sptr)


packet_decap_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_decap = packet_decap.make;

class packet_encap(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::packet_encap.

    To avoid accidental use of raw pointers, fullduplex::packet_encap's constructor is in a private implementation class. fullduplex::packet_encap::make is the public interface for creating new instances.

    Args:
        debug : 
        sig_pilot_pos : 
        pad_front : 
        len_tag_key : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(*args, **kwargs):
        """
        make(bool debug=False, unsigned int sig_pilot_pos=0, unsigned int pad_front=0, std::string const & len_tag_key) -> packet_encap_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::packet_encap.

        To avoid accidental use of raw pointers, fullduplex::packet_encap's constructor is in a private implementation class. fullduplex::packet_encap::make is the public interface for creating new instances.

        Args:
            debug : 
            sig_pilot_pos : 
            pad_front : 
            len_tag_key : 
        """
        return _fullduplex_swig.packet_encap_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _fullduplex_swig.delete_packet_encap
    __del__ = lambda self: None
packet_encap_swigregister = _fullduplex_swig.packet_encap_swigregister
packet_encap_swigregister(packet_encap)

def packet_encap_make(*args, **kwargs):
    """
    packet_encap_make(bool debug=False, unsigned int sig_pilot_pos=0, unsigned int pad_front=0, std::string const & len_tag_key) -> packet_encap_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::packet_encap.

    To avoid accidental use of raw pointers, fullduplex::packet_encap's constructor is in a private implementation class. fullduplex::packet_encap::make is the public interface for creating new instances.

    Args:
        debug : 
        sig_pilot_pos : 
        pad_front : 
        len_tag_key : 
    """
    return _fullduplex_swig.packet_encap_make(*args, **kwargs)

class packet_encap_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::packet_encap)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::packet_encap)> self) -> packet_encap_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::packet_encap)> self, packet_encap p) -> packet_encap_sptr
        """
        this = _fullduplex_swig.new_packet_encap_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_encap_sptr self) -> packet_encap"""
        return _fullduplex_swig.packet_encap_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_packet_encap_sptr
    __del__ = lambda self: None

    def make(self, *args, **kwargs):
        """
        make(packet_encap_sptr self, bool debug=False, unsigned int sig_pilot_pos=0, unsigned int pad_front=0, std::string const & len_tag_key) -> packet_encap_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::packet_encap.

        To avoid accidental use of raw pointers, fullduplex::packet_encap's constructor is in a private implementation class. fullduplex::packet_encap::make is the public interface for creating new instances.

        Args:
            debug : 
            sig_pilot_pos : 
            pad_front : 
            len_tag_key : 
        """
        return _fullduplex_swig.packet_encap_sptr_make(self, *args, **kwargs)


    def history(self):
        """history(packet_encap_sptr self) -> unsigned int"""
        return _fullduplex_swig.packet_encap_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_encap_sptr self, int which, int delay)
        declare_sample_delay(packet_encap_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.packet_encap_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_encap_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.packet_encap_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_encap_sptr self) -> int"""
        return _fullduplex_swig.packet_encap_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_encap_sptr self) -> double"""
        return _fullduplex_swig.packet_encap_sptr_relative_rate(self)


    def start(self):
        """start(packet_encap_sptr self) -> bool"""
        return _fullduplex_swig.packet_encap_sptr_start(self)


    def stop(self):
        """stop(packet_encap_sptr self) -> bool"""
        return _fullduplex_swig.packet_encap_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_encap_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.packet_encap_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_encap_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.packet_encap_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_encap_sptr self) -> int"""
        return _fullduplex_swig.packet_encap_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_encap_sptr self, int m)"""
        return _fullduplex_swig.packet_encap_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_encap_sptr self)"""
        return _fullduplex_swig.packet_encap_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_encap_sptr self) -> bool"""
        return _fullduplex_swig.packet_encap_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_encap_sptr self, int m)"""
        return _fullduplex_swig.packet_encap_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_encap_sptr self) -> int"""
        return _fullduplex_swig.packet_encap_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_encap_sptr self, int i) -> long"""
        return _fullduplex_swig.packet_encap_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_encap_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_encap_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.packet_encap_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_encap_sptr self, int i) -> long"""
        return _fullduplex_swig.packet_encap_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_encap_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_encap_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.packet_encap_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_encap_sptr self, int which) -> float
        pc_input_buffers_full(packet_encap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_encap_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_encap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_encap_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_encap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_encap_sptr self, int which) -> float
        pc_output_buffers_full(packet_encap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_encap_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_encap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_encap_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_encap_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_encap_sptr self) -> float"""
        return _fullduplex_swig.packet_encap_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_encap_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.packet_encap_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_encap_sptr self)"""
        return _fullduplex_swig.packet_encap_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_encap_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.packet_encap_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_encap_sptr self) -> int"""
        return _fullduplex_swig.packet_encap_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_encap_sptr self) -> int"""
        return _fullduplex_swig.packet_encap_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_encap_sptr self, int priority) -> int"""
        return _fullduplex_swig.packet_encap_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_encap_sptr self) -> std::string"""
        return _fullduplex_swig.packet_encap_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_encap_sptr self) -> std::string"""
        return _fullduplex_swig.packet_encap_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_encap_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.packet_encap_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_encap_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.packet_encap_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_encap_sptr self) -> long"""
        return _fullduplex_swig.packet_encap_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_encap_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.packet_encap_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_encap_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.packet_encap_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_encap_sptr self) -> std::string"""
        return _fullduplex_swig.packet_encap_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_encap_sptr self, std::string name)"""
        return _fullduplex_swig.packet_encap_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_encap_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.packet_encap_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_encap_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.packet_encap_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_encap_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.packet_encap_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_encap_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.packet_encap_sptr_message_subscribers(self, which_port)

packet_encap_sptr_swigregister = _fullduplex_swig.packet_encap_sptr_swigregister
packet_encap_sptr_swigregister(packet_encap_sptr)


packet_encap_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_encap = packet_encap.make;

class packet_encap2(object):
    """


    Constructor Specific Documentation:



    Args:
        debug : 
        delay : 
        delay_sec : 
        pad_front : 
        pad_tail : 
        sig_pilot_pos : 
        premultiplier : 
        sync_word : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0, sig_pilot_pos=0, premultiplier=1, sync_word=1):
        """
        make(bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0, unsigned int sig_pilot_pos=0, double premultiplier=1, unsigned int sync_word=1) -> packet_encap2_sptr



        Constructor Specific Documentation:



        Args:
            debug : 
            delay : 
            delay_sec : 
            pad_front : 
            pad_tail : 
            sig_pilot_pos : 
            premultiplier : 
            sync_word : 
        """
        return _fullduplex_swig.packet_encap2_make(debug, delay, delay_sec, pad_front, pad_tail, sig_pilot_pos, premultiplier, sync_word)

    make = staticmethod(make)
    __swig_destroy__ = _fullduplex_swig.delete_packet_encap2
    __del__ = lambda self: None
packet_encap2_swigregister = _fullduplex_swig.packet_encap2_swigregister
packet_encap2_swigregister(packet_encap2)

def packet_encap2_make(debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0, sig_pilot_pos=0, premultiplier=1, sync_word=1):
    """
    packet_encap2_make(bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0, unsigned int sig_pilot_pos=0, double premultiplier=1, unsigned int sync_word=1) -> packet_encap2_sptr



    Constructor Specific Documentation:



    Args:
        debug : 
        delay : 
        delay_sec : 
        pad_front : 
        pad_tail : 
        sig_pilot_pos : 
        premultiplier : 
        sync_word : 
    """
    return _fullduplex_swig.packet_encap2_make(debug, delay, delay_sec, pad_front, pad_tail, sig_pilot_pos, premultiplier, sync_word)

class packet_encap2_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::packet_encap2)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::packet_encap2)> self) -> packet_encap2_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::packet_encap2)> self, packet_encap2 p) -> packet_encap2_sptr
        """
        this = _fullduplex_swig.new_packet_encap2_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_encap2_sptr self) -> packet_encap2"""
        return _fullduplex_swig.packet_encap2_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_packet_encap2_sptr
    __del__ = lambda self: None

    def make(self, debug=False, delay=False, delay_sec=0.01, pad_front=0, pad_tail=0, sig_pilot_pos=0, premultiplier=1, sync_word=1):
        """
        make(packet_encap2_sptr self, bool debug=False, bool delay=False, double delay_sec=0.01, unsigned int pad_front=0, unsigned int pad_tail=0, unsigned int sig_pilot_pos=0, double premultiplier=1, unsigned int sync_word=1) -> packet_encap2_sptr



        Constructor Specific Documentation:



        Args:
            debug : 
            delay : 
            delay_sec : 
            pad_front : 
            pad_tail : 
            sig_pilot_pos : 
            premultiplier : 
            sync_word : 
        """
        return _fullduplex_swig.packet_encap2_sptr_make(self, debug, delay, delay_sec, pad_front, pad_tail, sig_pilot_pos, premultiplier, sync_word)


    def history(self):
        """history(packet_encap2_sptr self) -> unsigned int"""
        return _fullduplex_swig.packet_encap2_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_encap2_sptr self, int which, int delay)
        declare_sample_delay(packet_encap2_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.packet_encap2_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_encap2_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.packet_encap2_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_encap2_sptr self) -> int"""
        return _fullduplex_swig.packet_encap2_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_encap2_sptr self) -> double"""
        return _fullduplex_swig.packet_encap2_sptr_relative_rate(self)


    def start(self):
        """start(packet_encap2_sptr self) -> bool"""
        return _fullduplex_swig.packet_encap2_sptr_start(self)


    def stop(self):
        """stop(packet_encap2_sptr self) -> bool"""
        return _fullduplex_swig.packet_encap2_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_encap2_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.packet_encap2_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_encap2_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.packet_encap2_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_encap2_sptr self) -> int"""
        return _fullduplex_swig.packet_encap2_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_encap2_sptr self, int m)"""
        return _fullduplex_swig.packet_encap2_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_encap2_sptr self)"""
        return _fullduplex_swig.packet_encap2_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_encap2_sptr self) -> bool"""
        return _fullduplex_swig.packet_encap2_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_encap2_sptr self, int m)"""
        return _fullduplex_swig.packet_encap2_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_encap2_sptr self) -> int"""
        return _fullduplex_swig.packet_encap2_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_encap2_sptr self, int i) -> long"""
        return _fullduplex_swig.packet_encap2_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_encap2_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_encap2_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.packet_encap2_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_encap2_sptr self, int i) -> long"""
        return _fullduplex_swig.packet_encap2_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_encap2_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_encap2_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.packet_encap2_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_encap2_sptr self, int which) -> float
        pc_input_buffers_full(packet_encap2_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap2_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_encap2_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_encap2_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap2_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_encap2_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_encap2_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap2_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_encap2_sptr self, int which) -> float
        pc_output_buffers_full(packet_encap2_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap2_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_encap2_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_encap2_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap2_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_encap2_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_encap2_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.packet_encap2_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_encap2_sptr self) -> float"""
        return _fullduplex_swig.packet_encap2_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_encap2_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.packet_encap2_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_encap2_sptr self)"""
        return _fullduplex_swig.packet_encap2_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_encap2_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.packet_encap2_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_encap2_sptr self) -> int"""
        return _fullduplex_swig.packet_encap2_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_encap2_sptr self) -> int"""
        return _fullduplex_swig.packet_encap2_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_encap2_sptr self, int priority) -> int"""
        return _fullduplex_swig.packet_encap2_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_encap2_sptr self) -> std::string"""
        return _fullduplex_swig.packet_encap2_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_encap2_sptr self) -> std::string"""
        return _fullduplex_swig.packet_encap2_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_encap2_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.packet_encap2_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_encap2_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.packet_encap2_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_encap2_sptr self) -> long"""
        return _fullduplex_swig.packet_encap2_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_encap2_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.packet_encap2_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_encap2_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.packet_encap2_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_encap2_sptr self) -> std::string"""
        return _fullduplex_swig.packet_encap2_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_encap2_sptr self, std::string name)"""
        return _fullduplex_swig.packet_encap2_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_encap2_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.packet_encap2_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_encap2_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.packet_encap2_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_encap2_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.packet_encap2_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_encap2_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.packet_encap2_sptr_message_subscribers(self, which_port)

packet_encap2_sptr_swigregister = _fullduplex_swig.packet_encap2_sptr_swigregister
packet_encap2_sptr_swigregister(packet_encap2_sptr)


packet_encap2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_encap2 = packet_encap2.make;

class parse_stream_sync(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::parse_stream_sync.

    To avoid accidental use of raw pointers, fullduplex::parse_stream_sync's constructor is in a private implementation class. fullduplex::parse_stream_sync::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_tx2rx : 
        pad_front : 
        frame_len : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(debug=False, delay_tx2rx=0, pad_front=0, frame_len=0):
        """
        make(bool debug=False, unsigned int delay_tx2rx=0, unsigned int pad_front=0, unsigned int frame_len=0) -> parse_stream_sync_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::parse_stream_sync.

        To avoid accidental use of raw pointers, fullduplex::parse_stream_sync's constructor is in a private implementation class. fullduplex::parse_stream_sync::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_tx2rx : 
            pad_front : 
            frame_len : 
        """
        return _fullduplex_swig.parse_stream_sync_make(debug, delay_tx2rx, pad_front, frame_len)

    make = staticmethod(make)

    def set_delay(self, delay_tx2rx):
        """set_delay(parse_stream_sync self, int delay_tx2rx)"""
        return _fullduplex_swig.parse_stream_sync_set_delay(self, delay_tx2rx)

    __swig_destroy__ = _fullduplex_swig.delete_parse_stream_sync
    __del__ = lambda self: None
parse_stream_sync_swigregister = _fullduplex_swig.parse_stream_sync_swigregister
parse_stream_sync_swigregister(parse_stream_sync)

def parse_stream_sync_make(debug=False, delay_tx2rx=0, pad_front=0, frame_len=0):
    """
    parse_stream_sync_make(bool debug=False, unsigned int delay_tx2rx=0, unsigned int pad_front=0, unsigned int frame_len=0) -> parse_stream_sync_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::parse_stream_sync.

    To avoid accidental use of raw pointers, fullduplex::parse_stream_sync's constructor is in a private implementation class. fullduplex::parse_stream_sync::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_tx2rx : 
        pad_front : 
        frame_len : 
    """
    return _fullduplex_swig.parse_stream_sync_make(debug, delay_tx2rx, pad_front, frame_len)

class parse_stream_sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::parse_stream_sync)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::parse_stream_sync)> self) -> parse_stream_sync_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::parse_stream_sync)> self, parse_stream_sync p) -> parse_stream_sync_sptr
        """
        this = _fullduplex_swig.new_parse_stream_sync_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(parse_stream_sync_sptr self) -> parse_stream_sync"""
        return _fullduplex_swig.parse_stream_sync_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_parse_stream_sync_sptr
    __del__ = lambda self: None

    def make(self, debug=False, delay_tx2rx=0, pad_front=0, frame_len=0):
        """
        make(parse_stream_sync_sptr self, bool debug=False, unsigned int delay_tx2rx=0, unsigned int pad_front=0, unsigned int frame_len=0) -> parse_stream_sync_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::parse_stream_sync.

        To avoid accidental use of raw pointers, fullduplex::parse_stream_sync's constructor is in a private implementation class. fullduplex::parse_stream_sync::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_tx2rx : 
            pad_front : 
            frame_len : 
        """
        return _fullduplex_swig.parse_stream_sync_sptr_make(self, debug, delay_tx2rx, pad_front, frame_len)


    def set_delay(self, delay_tx2rx):
        """set_delay(parse_stream_sync_sptr self, int delay_tx2rx)"""
        return _fullduplex_swig.parse_stream_sync_sptr_set_delay(self, delay_tx2rx)


    def history(self):
        """history(parse_stream_sync_sptr self) -> unsigned int"""
        return _fullduplex_swig.parse_stream_sync_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(parse_stream_sync_sptr self, int which, int delay)
        declare_sample_delay(parse_stream_sync_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.parse_stream_sync_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(parse_stream_sync_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.parse_stream_sync_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(parse_stream_sync_sptr self) -> int"""
        return _fullduplex_swig.parse_stream_sync_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(parse_stream_sync_sptr self) -> double"""
        return _fullduplex_swig.parse_stream_sync_sptr_relative_rate(self)


    def start(self):
        """start(parse_stream_sync_sptr self) -> bool"""
        return _fullduplex_swig.parse_stream_sync_sptr_start(self)


    def stop(self):
        """stop(parse_stream_sync_sptr self) -> bool"""
        return _fullduplex_swig.parse_stream_sync_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(parse_stream_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.parse_stream_sync_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(parse_stream_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.parse_stream_sync_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(parse_stream_sync_sptr self) -> int"""
        return _fullduplex_swig.parse_stream_sync_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(parse_stream_sync_sptr self, int m)"""
        return _fullduplex_swig.parse_stream_sync_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(parse_stream_sync_sptr self)"""
        return _fullduplex_swig.parse_stream_sync_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(parse_stream_sync_sptr self) -> bool"""
        return _fullduplex_swig.parse_stream_sync_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(parse_stream_sync_sptr self, int m)"""
        return _fullduplex_swig.parse_stream_sync_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(parse_stream_sync_sptr self) -> int"""
        return _fullduplex_swig.parse_stream_sync_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(parse_stream_sync_sptr self, int i) -> long"""
        return _fullduplex_swig.parse_stream_sync_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(parse_stream_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(parse_stream_sync_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.parse_stream_sync_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(parse_stream_sync_sptr self, int i) -> long"""
        return _fullduplex_swig.parse_stream_sync_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(parse_stream_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(parse_stream_sync_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.parse_stream_sync_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(parse_stream_sync_sptr self, int which) -> float
        pc_input_buffers_full(parse_stream_sync_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.parse_stream_sync_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(parse_stream_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(parse_stream_sync_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.parse_stream_sync_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(parse_stream_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(parse_stream_sync_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.parse_stream_sync_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(parse_stream_sync_sptr self, int which) -> float
        pc_output_buffers_full(parse_stream_sync_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.parse_stream_sync_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(parse_stream_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(parse_stream_sync_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.parse_stream_sync_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(parse_stream_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(parse_stream_sync_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.parse_stream_sync_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(parse_stream_sync_sptr self) -> float"""
        return _fullduplex_swig.parse_stream_sync_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(parse_stream_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.parse_stream_sync_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(parse_stream_sync_sptr self)"""
        return _fullduplex_swig.parse_stream_sync_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(parse_stream_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.parse_stream_sync_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(parse_stream_sync_sptr self) -> int"""
        return _fullduplex_swig.parse_stream_sync_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(parse_stream_sync_sptr self) -> int"""
        return _fullduplex_swig.parse_stream_sync_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(parse_stream_sync_sptr self, int priority) -> int"""
        return _fullduplex_swig.parse_stream_sync_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(parse_stream_sync_sptr self) -> std::string"""
        return _fullduplex_swig.parse_stream_sync_sptr_name(self)


    def symbol_name(self):
        """symbol_name(parse_stream_sync_sptr self) -> std::string"""
        return _fullduplex_swig.parse_stream_sync_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(parse_stream_sync_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.parse_stream_sync_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(parse_stream_sync_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.parse_stream_sync_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(parse_stream_sync_sptr self) -> long"""
        return _fullduplex_swig.parse_stream_sync_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(parse_stream_sync_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.parse_stream_sync_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(parse_stream_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.parse_stream_sync_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(parse_stream_sync_sptr self) -> std::string"""
        return _fullduplex_swig.parse_stream_sync_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(parse_stream_sync_sptr self, std::string name)"""
        return _fullduplex_swig.parse_stream_sync_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(parse_stream_sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.parse_stream_sync_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(parse_stream_sync_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.parse_stream_sync_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(parse_stream_sync_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.parse_stream_sync_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(parse_stream_sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.parse_stream_sync_sptr_message_subscribers(self, which_port)

parse_stream_sync_sptr_swigregister = _fullduplex_swig.parse_stream_sync_sptr_swigregister
parse_stream_sync_sptr_swigregister(parse_stream_sync_sptr)


parse_stream_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
parse_stream_sync = parse_stream_sync.make;

class digital_sic(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::digital_sic.

    To avoid accidental use of raw pointers, fullduplex::digital_sic's constructor is in a private implementation class. fullduplex::digital_sic::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_tx2rx : 
        pad_front : 
        sig_pilot_pos : 
        frame_len : 
        si_chan_k : 
        si_chan_dim : 
        premultiplier : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(debug=False, delay_tx2rx=0, pad_front=0, sig_pilot_pos=0, frame_len=0, si_chan_k=0, si_chan_dim=1, premultiplier=1):
        """
        make(bool debug=False, unsigned int delay_tx2rx=0, unsigned int pad_front=0, unsigned int sig_pilot_pos=0, unsigned int frame_len=0, unsigned int si_chan_k=0, unsigned int si_chan_dim=1, double premultiplier=1) -> digital_sic_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::digital_sic.

        To avoid accidental use of raw pointers, fullduplex::digital_sic's constructor is in a private implementation class. fullduplex::digital_sic::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_tx2rx : 
            pad_front : 
            sig_pilot_pos : 
            frame_len : 
            si_chan_k : 
            si_chan_dim : 
            premultiplier : 
        """
        return _fullduplex_swig.digital_sic_make(debug, delay_tx2rx, pad_front, sig_pilot_pos, frame_len, si_chan_k, si_chan_dim, premultiplier)

    make = staticmethod(make)

    def set_delay_tx2rx(self, delay_tx2rx):
        """set_delay_tx2rx(digital_sic self, int delay_tx2rx)"""
        return _fullduplex_swig.digital_sic_set_delay_tx2rx(self, delay_tx2rx)

    __swig_destroy__ = _fullduplex_swig.delete_digital_sic
    __del__ = lambda self: None
digital_sic_swigregister = _fullduplex_swig.digital_sic_swigregister
digital_sic_swigregister(digital_sic)

def digital_sic_make(debug=False, delay_tx2rx=0, pad_front=0, sig_pilot_pos=0, frame_len=0, si_chan_k=0, si_chan_dim=1, premultiplier=1):
    """
    digital_sic_make(bool debug=False, unsigned int delay_tx2rx=0, unsigned int pad_front=0, unsigned int sig_pilot_pos=0, unsigned int frame_len=0, unsigned int si_chan_k=0, unsigned int si_chan_dim=1, double premultiplier=1) -> digital_sic_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::digital_sic.

    To avoid accidental use of raw pointers, fullduplex::digital_sic's constructor is in a private implementation class. fullduplex::digital_sic::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_tx2rx : 
        pad_front : 
        sig_pilot_pos : 
        frame_len : 
        si_chan_k : 
        si_chan_dim : 
        premultiplier : 
    """
    return _fullduplex_swig.digital_sic_make(debug, delay_tx2rx, pad_front, sig_pilot_pos, frame_len, si_chan_k, si_chan_dim, premultiplier)

class digital_sic_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::digital_sic)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::digital_sic)> self) -> digital_sic_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::digital_sic)> self, digital_sic p) -> digital_sic_sptr
        """
        this = _fullduplex_swig.new_digital_sic_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(digital_sic_sptr self) -> digital_sic"""
        return _fullduplex_swig.digital_sic_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_digital_sic_sptr
    __del__ = lambda self: None

    def make(self, debug=False, delay_tx2rx=0, pad_front=0, sig_pilot_pos=0, frame_len=0, si_chan_k=0, si_chan_dim=1, premultiplier=1):
        """
        make(digital_sic_sptr self, bool debug=False, unsigned int delay_tx2rx=0, unsigned int pad_front=0, unsigned int sig_pilot_pos=0, unsigned int frame_len=0, unsigned int si_chan_k=0, unsigned int si_chan_dim=1, double premultiplier=1) -> digital_sic_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::digital_sic.

        To avoid accidental use of raw pointers, fullduplex::digital_sic's constructor is in a private implementation class. fullduplex::digital_sic::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_tx2rx : 
            pad_front : 
            sig_pilot_pos : 
            frame_len : 
            si_chan_k : 
            si_chan_dim : 
            premultiplier : 
        """
        return _fullduplex_swig.digital_sic_sptr_make(self, debug, delay_tx2rx, pad_front, sig_pilot_pos, frame_len, si_chan_k, si_chan_dim, premultiplier)


    def set_delay_tx2rx(self, delay_tx2rx):
        """set_delay_tx2rx(digital_sic_sptr self, int delay_tx2rx)"""
        return _fullduplex_swig.digital_sic_sptr_set_delay_tx2rx(self, delay_tx2rx)


    def history(self):
        """history(digital_sic_sptr self) -> unsigned int"""
        return _fullduplex_swig.digital_sic_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(digital_sic_sptr self, int which, int delay)
        declare_sample_delay(digital_sic_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.digital_sic_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(digital_sic_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.digital_sic_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(digital_sic_sptr self) -> int"""
        return _fullduplex_swig.digital_sic_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(digital_sic_sptr self) -> double"""
        return _fullduplex_swig.digital_sic_sptr_relative_rate(self)


    def start(self):
        """start(digital_sic_sptr self) -> bool"""
        return _fullduplex_swig.digital_sic_sptr_start(self)


    def stop(self):
        """stop(digital_sic_sptr self) -> bool"""
        return _fullduplex_swig.digital_sic_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(digital_sic_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.digital_sic_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(digital_sic_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.digital_sic_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(digital_sic_sptr self) -> int"""
        return _fullduplex_swig.digital_sic_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(digital_sic_sptr self, int m)"""
        return _fullduplex_swig.digital_sic_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(digital_sic_sptr self)"""
        return _fullduplex_swig.digital_sic_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(digital_sic_sptr self) -> bool"""
        return _fullduplex_swig.digital_sic_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(digital_sic_sptr self, int m)"""
        return _fullduplex_swig.digital_sic_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(digital_sic_sptr self) -> int"""
        return _fullduplex_swig.digital_sic_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(digital_sic_sptr self, int i) -> long"""
        return _fullduplex_swig.digital_sic_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(digital_sic_sptr self, long max_output_buffer)
        set_max_output_buffer(digital_sic_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.digital_sic_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(digital_sic_sptr self, int i) -> long"""
        return _fullduplex_swig.digital_sic_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(digital_sic_sptr self, long min_output_buffer)
        set_min_output_buffer(digital_sic_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.digital_sic_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(digital_sic_sptr self, int which) -> float
        pc_input_buffers_full(digital_sic_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.digital_sic_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(digital_sic_sptr self, int which) -> float
        pc_input_buffers_full_avg(digital_sic_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.digital_sic_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(digital_sic_sptr self, int which) -> float
        pc_input_buffers_full_var(digital_sic_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.digital_sic_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(digital_sic_sptr self, int which) -> float
        pc_output_buffers_full(digital_sic_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.digital_sic_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(digital_sic_sptr self, int which) -> float
        pc_output_buffers_full_avg(digital_sic_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.digital_sic_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(digital_sic_sptr self, int which) -> float
        pc_output_buffers_full_var(digital_sic_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.digital_sic_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(digital_sic_sptr self) -> float"""
        return _fullduplex_swig.digital_sic_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(digital_sic_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.digital_sic_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(digital_sic_sptr self)"""
        return _fullduplex_swig.digital_sic_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(digital_sic_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.digital_sic_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(digital_sic_sptr self) -> int"""
        return _fullduplex_swig.digital_sic_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(digital_sic_sptr self) -> int"""
        return _fullduplex_swig.digital_sic_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(digital_sic_sptr self, int priority) -> int"""
        return _fullduplex_swig.digital_sic_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(digital_sic_sptr self) -> std::string"""
        return _fullduplex_swig.digital_sic_sptr_name(self)


    def symbol_name(self):
        """symbol_name(digital_sic_sptr self) -> std::string"""
        return _fullduplex_swig.digital_sic_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(digital_sic_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.digital_sic_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(digital_sic_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.digital_sic_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(digital_sic_sptr self) -> long"""
        return _fullduplex_swig.digital_sic_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(digital_sic_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.digital_sic_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(digital_sic_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.digital_sic_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(digital_sic_sptr self) -> std::string"""
        return _fullduplex_swig.digital_sic_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(digital_sic_sptr self, std::string name)"""
        return _fullduplex_swig.digital_sic_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(digital_sic_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.digital_sic_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(digital_sic_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.digital_sic_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(digital_sic_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.digital_sic_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(digital_sic_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.digital_sic_sptr_message_subscribers(self, which_port)

digital_sic_sptr_swigregister = _fullduplex_swig.digital_sic_sptr_swigregister
digital_sic_sptr_swigregister(digital_sic_sptr)


digital_sic_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
digital_sic = digital_sic.make;

class residual_si_vis(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::residual_si_vis.

    To avoid accidental use of raw pointers, fullduplex::residual_si_vis's constructor is in a private implementation class. fullduplex::residual_si_vis::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make():
        """
        make() -> residual_si_vis_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::residual_si_vis.

        To avoid accidental use of raw pointers, fullduplex::residual_si_vis's constructor is in a private implementation class. fullduplex::residual_si_vis::make is the public interface for creating new instances.
        """
        return _fullduplex_swig.residual_si_vis_make()

    make = staticmethod(make)

    def setVals(self, cf_0, cf_1):
        """setVals(residual_si_vis self, int cf_0, int cf_1)"""
        return _fullduplex_swig.residual_si_vis_setVals(self, cf_0, cf_1)

    __swig_destroy__ = _fullduplex_swig.delete_residual_si_vis
    __del__ = lambda self: None
residual_si_vis_swigregister = _fullduplex_swig.residual_si_vis_swigregister
residual_si_vis_swigregister(residual_si_vis)

def residual_si_vis_make():
    """
    residual_si_vis_make() -> residual_si_vis_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::residual_si_vis.

    To avoid accidental use of raw pointers, fullduplex::residual_si_vis's constructor is in a private implementation class. fullduplex::residual_si_vis::make is the public interface for creating new instances.
    """
    return _fullduplex_swig.residual_si_vis_make()

class residual_si_vis_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::residual_si_vis)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::residual_si_vis)> self) -> residual_si_vis_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::residual_si_vis)> self, residual_si_vis p) -> residual_si_vis_sptr
        """
        this = _fullduplex_swig.new_residual_si_vis_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(residual_si_vis_sptr self) -> residual_si_vis"""
        return _fullduplex_swig.residual_si_vis_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_residual_si_vis_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(residual_si_vis_sptr self) -> residual_si_vis_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::residual_si_vis.

        To avoid accidental use of raw pointers, fullduplex::residual_si_vis's constructor is in a private implementation class. fullduplex::residual_si_vis::make is the public interface for creating new instances.
        """
        return _fullduplex_swig.residual_si_vis_sptr_make(self)


    def setVals(self, cf_0, cf_1):
        """setVals(residual_si_vis_sptr self, int cf_0, int cf_1)"""
        return _fullduplex_swig.residual_si_vis_sptr_setVals(self, cf_0, cf_1)


    def history(self):
        """history(residual_si_vis_sptr self) -> unsigned int"""
        return _fullduplex_swig.residual_si_vis_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(residual_si_vis_sptr self, int which, int delay)
        declare_sample_delay(residual_si_vis_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.residual_si_vis_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(residual_si_vis_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.residual_si_vis_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(residual_si_vis_sptr self) -> int"""
        return _fullduplex_swig.residual_si_vis_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(residual_si_vis_sptr self) -> double"""
        return _fullduplex_swig.residual_si_vis_sptr_relative_rate(self)


    def start(self):
        """start(residual_si_vis_sptr self) -> bool"""
        return _fullduplex_swig.residual_si_vis_sptr_start(self)


    def stop(self):
        """stop(residual_si_vis_sptr self) -> bool"""
        return _fullduplex_swig.residual_si_vis_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(residual_si_vis_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.residual_si_vis_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(residual_si_vis_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.residual_si_vis_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(residual_si_vis_sptr self) -> int"""
        return _fullduplex_swig.residual_si_vis_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(residual_si_vis_sptr self, int m)"""
        return _fullduplex_swig.residual_si_vis_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(residual_si_vis_sptr self)"""
        return _fullduplex_swig.residual_si_vis_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(residual_si_vis_sptr self) -> bool"""
        return _fullduplex_swig.residual_si_vis_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(residual_si_vis_sptr self, int m)"""
        return _fullduplex_swig.residual_si_vis_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(residual_si_vis_sptr self) -> int"""
        return _fullduplex_swig.residual_si_vis_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(residual_si_vis_sptr self, int i) -> long"""
        return _fullduplex_swig.residual_si_vis_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(residual_si_vis_sptr self, long max_output_buffer)
        set_max_output_buffer(residual_si_vis_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.residual_si_vis_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(residual_si_vis_sptr self, int i) -> long"""
        return _fullduplex_swig.residual_si_vis_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(residual_si_vis_sptr self, long min_output_buffer)
        set_min_output_buffer(residual_si_vis_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.residual_si_vis_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(residual_si_vis_sptr self, int which) -> float
        pc_input_buffers_full(residual_si_vis_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.residual_si_vis_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(residual_si_vis_sptr self, int which) -> float
        pc_input_buffers_full_avg(residual_si_vis_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.residual_si_vis_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(residual_si_vis_sptr self, int which) -> float
        pc_input_buffers_full_var(residual_si_vis_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.residual_si_vis_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(residual_si_vis_sptr self, int which) -> float
        pc_output_buffers_full(residual_si_vis_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.residual_si_vis_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(residual_si_vis_sptr self, int which) -> float
        pc_output_buffers_full_avg(residual_si_vis_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.residual_si_vis_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(residual_si_vis_sptr self, int which) -> float
        pc_output_buffers_full_var(residual_si_vis_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.residual_si_vis_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(residual_si_vis_sptr self) -> float"""
        return _fullduplex_swig.residual_si_vis_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(residual_si_vis_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.residual_si_vis_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(residual_si_vis_sptr self)"""
        return _fullduplex_swig.residual_si_vis_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(residual_si_vis_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.residual_si_vis_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(residual_si_vis_sptr self) -> int"""
        return _fullduplex_swig.residual_si_vis_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(residual_si_vis_sptr self) -> int"""
        return _fullduplex_swig.residual_si_vis_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(residual_si_vis_sptr self, int priority) -> int"""
        return _fullduplex_swig.residual_si_vis_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(residual_si_vis_sptr self) -> std::string"""
        return _fullduplex_swig.residual_si_vis_sptr_name(self)


    def symbol_name(self):
        """symbol_name(residual_si_vis_sptr self) -> std::string"""
        return _fullduplex_swig.residual_si_vis_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(residual_si_vis_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.residual_si_vis_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(residual_si_vis_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.residual_si_vis_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(residual_si_vis_sptr self) -> long"""
        return _fullduplex_swig.residual_si_vis_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(residual_si_vis_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.residual_si_vis_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(residual_si_vis_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.residual_si_vis_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(residual_si_vis_sptr self) -> std::string"""
        return _fullduplex_swig.residual_si_vis_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(residual_si_vis_sptr self, std::string name)"""
        return _fullduplex_swig.residual_si_vis_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(residual_si_vis_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.residual_si_vis_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(residual_si_vis_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.residual_si_vis_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(residual_si_vis_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.residual_si_vis_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(residual_si_vis_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.residual_si_vis_sptr_message_subscribers(self, which_port)

residual_si_vis_sptr_swigregister = _fullduplex_swig.residual_si_vis_sptr_swigregister
residual_si_vis_sptr_swigregister(residual_si_vis_sptr)


residual_si_vis_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
residual_si_vis = residual_si_vis.make;

class ofdm_constellation(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::ofdm_constellation.

    To avoid accidental use of raw pointers, fullduplex::ofdm_constellation's constructor is in a private implementation class. fullduplex::ofdm_constellation::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_tx2rx : 
        pad_front : 
        packet_len : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(debug, delay_tx2rx, pad_front, packet_len):
        """
        make(bool debug, int delay_tx2rx, int pad_front, int packet_len) -> ofdm_constellation_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::ofdm_constellation.

        To avoid accidental use of raw pointers, fullduplex::ofdm_constellation's constructor is in a private implementation class. fullduplex::ofdm_constellation::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_tx2rx : 
            pad_front : 
            packet_len : 
        """
        return _fullduplex_swig.ofdm_constellation_make(debug, delay_tx2rx, pad_front, packet_len)

    make = staticmethod(make)

    def set_delay_tx2rx(self, delay_tx2rx):
        """set_delay_tx2rx(ofdm_constellation self, int delay_tx2rx)"""
        return _fullduplex_swig.ofdm_constellation_set_delay_tx2rx(self, delay_tx2rx)

    __swig_destroy__ = _fullduplex_swig.delete_ofdm_constellation
    __del__ = lambda self: None
ofdm_constellation_swigregister = _fullduplex_swig.ofdm_constellation_swigregister
ofdm_constellation_swigregister(ofdm_constellation)

def ofdm_constellation_make(debug, delay_tx2rx, pad_front, packet_len):
    """
    ofdm_constellation_make(bool debug, int delay_tx2rx, int pad_front, int packet_len) -> ofdm_constellation_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::ofdm_constellation.

    To avoid accidental use of raw pointers, fullduplex::ofdm_constellation's constructor is in a private implementation class. fullduplex::ofdm_constellation::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_tx2rx : 
        pad_front : 
        packet_len : 
    """
    return _fullduplex_swig.ofdm_constellation_make(debug, delay_tx2rx, pad_front, packet_len)

class ofdm_constellation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::ofdm_constellation)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::ofdm_constellation)> self) -> ofdm_constellation_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::ofdm_constellation)> self, ofdm_constellation p) -> ofdm_constellation_sptr
        """
        this = _fullduplex_swig.new_ofdm_constellation_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(ofdm_constellation_sptr self) -> ofdm_constellation"""
        return _fullduplex_swig.ofdm_constellation_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_ofdm_constellation_sptr
    __del__ = lambda self: None

    def make(self, debug, delay_tx2rx, pad_front, packet_len):
        """
        make(ofdm_constellation_sptr self, bool debug, int delay_tx2rx, int pad_front, int packet_len) -> ofdm_constellation_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::ofdm_constellation.

        To avoid accidental use of raw pointers, fullduplex::ofdm_constellation's constructor is in a private implementation class. fullduplex::ofdm_constellation::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_tx2rx : 
            pad_front : 
            packet_len : 
        """
        return _fullduplex_swig.ofdm_constellation_sptr_make(self, debug, delay_tx2rx, pad_front, packet_len)


    def set_delay_tx2rx(self, delay_tx2rx):
        """set_delay_tx2rx(ofdm_constellation_sptr self, int delay_tx2rx)"""
        return _fullduplex_swig.ofdm_constellation_sptr_set_delay_tx2rx(self, delay_tx2rx)


    def history(self):
        """history(ofdm_constellation_sptr self) -> unsigned int"""
        return _fullduplex_swig.ofdm_constellation_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ofdm_constellation_sptr self, int which, int delay)
        declare_sample_delay(ofdm_constellation_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.ofdm_constellation_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(ofdm_constellation_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.ofdm_constellation_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(ofdm_constellation_sptr self) -> int"""
        return _fullduplex_swig.ofdm_constellation_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(ofdm_constellation_sptr self) -> double"""
        return _fullduplex_swig.ofdm_constellation_sptr_relative_rate(self)


    def start(self):
        """start(ofdm_constellation_sptr self) -> bool"""
        return _fullduplex_swig.ofdm_constellation_sptr_start(self)


    def stop(self):
        """stop(ofdm_constellation_sptr self) -> bool"""
        return _fullduplex_swig.ofdm_constellation_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(ofdm_constellation_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.ofdm_constellation_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(ofdm_constellation_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.ofdm_constellation_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(ofdm_constellation_sptr self) -> int"""
        return _fullduplex_swig.ofdm_constellation_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(ofdm_constellation_sptr self, int m)"""
        return _fullduplex_swig.ofdm_constellation_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ofdm_constellation_sptr self)"""
        return _fullduplex_swig.ofdm_constellation_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ofdm_constellation_sptr self) -> bool"""
        return _fullduplex_swig.ofdm_constellation_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(ofdm_constellation_sptr self, int m)"""
        return _fullduplex_swig.ofdm_constellation_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(ofdm_constellation_sptr self) -> int"""
        return _fullduplex_swig.ofdm_constellation_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(ofdm_constellation_sptr self, int i) -> long"""
        return _fullduplex_swig.ofdm_constellation_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ofdm_constellation_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_constellation_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.ofdm_constellation_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(ofdm_constellation_sptr self, int i) -> long"""
        return _fullduplex_swig.ofdm_constellation_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ofdm_constellation_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_constellation_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.ofdm_constellation_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ofdm_constellation_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_constellation_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.ofdm_constellation_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ofdm_constellation_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_constellation_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.ofdm_constellation_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ofdm_constellation_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_constellation_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.ofdm_constellation_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ofdm_constellation_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_constellation_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.ofdm_constellation_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ofdm_constellation_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_constellation_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.ofdm_constellation_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ofdm_constellation_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_constellation_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.ofdm_constellation_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(ofdm_constellation_sptr self) -> float"""
        return _fullduplex_swig.ofdm_constellation_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(ofdm_constellation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.ofdm_constellation_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(ofdm_constellation_sptr self)"""
        return _fullduplex_swig.ofdm_constellation_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(ofdm_constellation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.ofdm_constellation_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(ofdm_constellation_sptr self) -> int"""
        return _fullduplex_swig.ofdm_constellation_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(ofdm_constellation_sptr self) -> int"""
        return _fullduplex_swig.ofdm_constellation_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(ofdm_constellation_sptr self, int priority) -> int"""
        return _fullduplex_swig.ofdm_constellation_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(ofdm_constellation_sptr self) -> std::string"""
        return _fullduplex_swig.ofdm_constellation_sptr_name(self)


    def symbol_name(self):
        """symbol_name(ofdm_constellation_sptr self) -> std::string"""
        return _fullduplex_swig.ofdm_constellation_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(ofdm_constellation_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.ofdm_constellation_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(ofdm_constellation_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.ofdm_constellation_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(ofdm_constellation_sptr self) -> long"""
        return _fullduplex_swig.ofdm_constellation_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(ofdm_constellation_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.ofdm_constellation_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(ofdm_constellation_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.ofdm_constellation_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(ofdm_constellation_sptr self) -> std::string"""
        return _fullduplex_swig.ofdm_constellation_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(ofdm_constellation_sptr self, std::string name)"""
        return _fullduplex_swig.ofdm_constellation_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(ofdm_constellation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.ofdm_constellation_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(ofdm_constellation_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.ofdm_constellation_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(ofdm_constellation_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.ofdm_constellation_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(ofdm_constellation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.ofdm_constellation_sptr_message_subscribers(self, which_port)

ofdm_constellation_sptr_swigregister = _fullduplex_swig.ofdm_constellation_sptr_swigregister
ofdm_constellation_sptr_swigregister(ofdm_constellation_sptr)


ofdm_constellation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_constellation = ofdm_constellation.make;

class snr_calc(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::snr_calc.

    To avoid accidental use of raw pointers, fullduplex::snr_calc's constructor is in a private implementation class. fullduplex::snr_calc::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_txrx : 
        pad_front : 
        data_symbols : 
        noise_start_idx : 
        noise_length : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(debug, delay_txrx, pad_front, data_symbols, noise_start_idx, noise_length):
        """
        make(bool debug, int delay_txrx, int pad_front, int data_symbols, int noise_start_idx, int noise_length) -> snr_calc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::snr_calc.

        To avoid accidental use of raw pointers, fullduplex::snr_calc's constructor is in a private implementation class. fullduplex::snr_calc::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_txrx : 
            pad_front : 
            data_symbols : 
            noise_start_idx : 
            noise_length : 
        """
        return _fullduplex_swig.snr_calc_make(debug, delay_txrx, pad_front, data_symbols, noise_start_idx, noise_length)

    make = staticmethod(make)

    def set_delay_tx2rx(self, delay_tx2rx):
        """set_delay_tx2rx(snr_calc self, int delay_tx2rx)"""
        return _fullduplex_swig.snr_calc_set_delay_tx2rx(self, delay_tx2rx)

    __swig_destroy__ = _fullduplex_swig.delete_snr_calc
    __del__ = lambda self: None
snr_calc_swigregister = _fullduplex_swig.snr_calc_swigregister
snr_calc_swigregister(snr_calc)

def snr_calc_make(debug, delay_txrx, pad_front, data_symbols, noise_start_idx, noise_length):
    """
    snr_calc_make(bool debug, int delay_txrx, int pad_front, int data_symbols, int noise_start_idx, int noise_length) -> snr_calc_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::snr_calc.

    To avoid accidental use of raw pointers, fullduplex::snr_calc's constructor is in a private implementation class. fullduplex::snr_calc::make is the public interface for creating new instances.

    Args:
        debug : 
        delay_txrx : 
        pad_front : 
        data_symbols : 
        noise_start_idx : 
        noise_length : 
    """
    return _fullduplex_swig.snr_calc_make(debug, delay_txrx, pad_front, data_symbols, noise_start_idx, noise_length)

class snr_calc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::snr_calc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::snr_calc)> self) -> snr_calc_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::snr_calc)> self, snr_calc p) -> snr_calc_sptr
        """
        this = _fullduplex_swig.new_snr_calc_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(snr_calc_sptr self) -> snr_calc"""
        return _fullduplex_swig.snr_calc_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_snr_calc_sptr
    __del__ = lambda self: None

    def make(self, debug, delay_txrx, pad_front, data_symbols, noise_start_idx, noise_length):
        """
        make(snr_calc_sptr self, bool debug, int delay_txrx, int pad_front, int data_symbols, int noise_start_idx, int noise_length) -> snr_calc_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::snr_calc.

        To avoid accidental use of raw pointers, fullduplex::snr_calc's constructor is in a private implementation class. fullduplex::snr_calc::make is the public interface for creating new instances.

        Args:
            debug : 
            delay_txrx : 
            pad_front : 
            data_symbols : 
            noise_start_idx : 
            noise_length : 
        """
        return _fullduplex_swig.snr_calc_sptr_make(self, debug, delay_txrx, pad_front, data_symbols, noise_start_idx, noise_length)


    def set_delay_tx2rx(self, delay_tx2rx):
        """set_delay_tx2rx(snr_calc_sptr self, int delay_tx2rx)"""
        return _fullduplex_swig.snr_calc_sptr_set_delay_tx2rx(self, delay_tx2rx)


    def history(self):
        """history(snr_calc_sptr self) -> unsigned int"""
        return _fullduplex_swig.snr_calc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(snr_calc_sptr self, int which, int delay)
        declare_sample_delay(snr_calc_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.snr_calc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(snr_calc_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.snr_calc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(snr_calc_sptr self) -> int"""
        return _fullduplex_swig.snr_calc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(snr_calc_sptr self) -> double"""
        return _fullduplex_swig.snr_calc_sptr_relative_rate(self)


    def start(self):
        """start(snr_calc_sptr self) -> bool"""
        return _fullduplex_swig.snr_calc_sptr_start(self)


    def stop(self):
        """stop(snr_calc_sptr self) -> bool"""
        return _fullduplex_swig.snr_calc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(snr_calc_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.snr_calc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(snr_calc_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.snr_calc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(snr_calc_sptr self) -> int"""
        return _fullduplex_swig.snr_calc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(snr_calc_sptr self, int m)"""
        return _fullduplex_swig.snr_calc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(snr_calc_sptr self)"""
        return _fullduplex_swig.snr_calc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(snr_calc_sptr self) -> bool"""
        return _fullduplex_swig.snr_calc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(snr_calc_sptr self, int m)"""
        return _fullduplex_swig.snr_calc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(snr_calc_sptr self) -> int"""
        return _fullduplex_swig.snr_calc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(snr_calc_sptr self, int i) -> long"""
        return _fullduplex_swig.snr_calc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(snr_calc_sptr self, long max_output_buffer)
        set_max_output_buffer(snr_calc_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.snr_calc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(snr_calc_sptr self, int i) -> long"""
        return _fullduplex_swig.snr_calc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(snr_calc_sptr self, long min_output_buffer)
        set_min_output_buffer(snr_calc_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.snr_calc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(snr_calc_sptr self, int which) -> float
        pc_input_buffers_full(snr_calc_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.snr_calc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(snr_calc_sptr self, int which) -> float
        pc_input_buffers_full_avg(snr_calc_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.snr_calc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(snr_calc_sptr self, int which) -> float
        pc_input_buffers_full_var(snr_calc_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.snr_calc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(snr_calc_sptr self, int which) -> float
        pc_output_buffers_full(snr_calc_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.snr_calc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(snr_calc_sptr self, int which) -> float
        pc_output_buffers_full_avg(snr_calc_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.snr_calc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(snr_calc_sptr self, int which) -> float
        pc_output_buffers_full_var(snr_calc_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.snr_calc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(snr_calc_sptr self) -> float"""
        return _fullduplex_swig.snr_calc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(snr_calc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.snr_calc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(snr_calc_sptr self)"""
        return _fullduplex_swig.snr_calc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(snr_calc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.snr_calc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(snr_calc_sptr self) -> int"""
        return _fullduplex_swig.snr_calc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(snr_calc_sptr self) -> int"""
        return _fullduplex_swig.snr_calc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(snr_calc_sptr self, int priority) -> int"""
        return _fullduplex_swig.snr_calc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(snr_calc_sptr self) -> std::string"""
        return _fullduplex_swig.snr_calc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(snr_calc_sptr self) -> std::string"""
        return _fullduplex_swig.snr_calc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(snr_calc_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.snr_calc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(snr_calc_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.snr_calc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(snr_calc_sptr self) -> long"""
        return _fullduplex_swig.snr_calc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(snr_calc_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.snr_calc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(snr_calc_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.snr_calc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(snr_calc_sptr self) -> std::string"""
        return _fullduplex_swig.snr_calc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(snr_calc_sptr self, std::string name)"""
        return _fullduplex_swig.snr_calc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(snr_calc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.snr_calc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(snr_calc_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.snr_calc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(snr_calc_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.snr_calc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(snr_calc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.snr_calc_sptr_message_subscribers(self, which_port)

snr_calc_sptr_swigregister = _fullduplex_swig.snr_calc_sptr_swigregister
snr_calc_sptr_swigregister(snr_calc_sptr)


snr_calc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
snr_calc = snr_calc.make;

class count_packets(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::count_packets.

    To avoid accidental use of raw pointers, fullduplex::count_packets's constructor is in a private implementation class. fullduplex::count_packets::make is the public interface for creating new instances.

    Args:
        debug : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(debug):
        """
        make(bool debug) -> count_packets_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::count_packets.

        To avoid accidental use of raw pointers, fullduplex::count_packets's constructor is in a private implementation class. fullduplex::count_packets::make is the public interface for creating new instances.

        Args:
            debug : 
        """
        return _fullduplex_swig.count_packets_make(debug)

    make = staticmethod(make)
    __swig_destroy__ = _fullduplex_swig.delete_count_packets
    __del__ = lambda self: None
count_packets_swigregister = _fullduplex_swig.count_packets_swigregister
count_packets_swigregister(count_packets)

def count_packets_make(debug):
    """
    count_packets_make(bool debug) -> count_packets_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::count_packets.

    To avoid accidental use of raw pointers, fullduplex::count_packets's constructor is in a private implementation class. fullduplex::count_packets::make is the public interface for creating new instances.

    Args:
        debug : 
    """
    return _fullduplex_swig.count_packets_make(debug)

class count_packets_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::count_packets)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::count_packets)> self) -> count_packets_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::count_packets)> self, count_packets p) -> count_packets_sptr
        """
        this = _fullduplex_swig.new_count_packets_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(count_packets_sptr self) -> count_packets"""
        return _fullduplex_swig.count_packets_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_count_packets_sptr
    __del__ = lambda self: None

    def make(self, debug):
        """
        make(count_packets_sptr self, bool debug) -> count_packets_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::count_packets.

        To avoid accidental use of raw pointers, fullduplex::count_packets's constructor is in a private implementation class. fullduplex::count_packets::make is the public interface for creating new instances.

        Args:
            debug : 
        """
        return _fullduplex_swig.count_packets_sptr_make(self, debug)


    def history(self):
        """history(count_packets_sptr self) -> unsigned int"""
        return _fullduplex_swig.count_packets_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(count_packets_sptr self, int which, int delay)
        declare_sample_delay(count_packets_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.count_packets_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(count_packets_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.count_packets_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(count_packets_sptr self) -> int"""
        return _fullduplex_swig.count_packets_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(count_packets_sptr self) -> double"""
        return _fullduplex_swig.count_packets_sptr_relative_rate(self)


    def start(self):
        """start(count_packets_sptr self) -> bool"""
        return _fullduplex_swig.count_packets_sptr_start(self)


    def stop(self):
        """stop(count_packets_sptr self) -> bool"""
        return _fullduplex_swig.count_packets_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(count_packets_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.count_packets_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(count_packets_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.count_packets_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(count_packets_sptr self) -> int"""
        return _fullduplex_swig.count_packets_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(count_packets_sptr self, int m)"""
        return _fullduplex_swig.count_packets_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(count_packets_sptr self)"""
        return _fullduplex_swig.count_packets_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(count_packets_sptr self) -> bool"""
        return _fullduplex_swig.count_packets_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(count_packets_sptr self, int m)"""
        return _fullduplex_swig.count_packets_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(count_packets_sptr self) -> int"""
        return _fullduplex_swig.count_packets_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(count_packets_sptr self, int i) -> long"""
        return _fullduplex_swig.count_packets_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(count_packets_sptr self, long max_output_buffer)
        set_max_output_buffer(count_packets_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.count_packets_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(count_packets_sptr self, int i) -> long"""
        return _fullduplex_swig.count_packets_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(count_packets_sptr self, long min_output_buffer)
        set_min_output_buffer(count_packets_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.count_packets_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(count_packets_sptr self, int which) -> float
        pc_input_buffers_full(count_packets_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.count_packets_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(count_packets_sptr self, int which) -> float
        pc_input_buffers_full_avg(count_packets_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.count_packets_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(count_packets_sptr self, int which) -> float
        pc_input_buffers_full_var(count_packets_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.count_packets_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(count_packets_sptr self, int which) -> float
        pc_output_buffers_full(count_packets_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.count_packets_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(count_packets_sptr self, int which) -> float
        pc_output_buffers_full_avg(count_packets_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.count_packets_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(count_packets_sptr self, int which) -> float
        pc_output_buffers_full_var(count_packets_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.count_packets_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(count_packets_sptr self) -> float"""
        return _fullduplex_swig.count_packets_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(count_packets_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.count_packets_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(count_packets_sptr self)"""
        return _fullduplex_swig.count_packets_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(count_packets_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.count_packets_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(count_packets_sptr self) -> int"""
        return _fullduplex_swig.count_packets_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(count_packets_sptr self) -> int"""
        return _fullduplex_swig.count_packets_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(count_packets_sptr self, int priority) -> int"""
        return _fullduplex_swig.count_packets_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(count_packets_sptr self) -> std::string"""
        return _fullduplex_swig.count_packets_sptr_name(self)


    def symbol_name(self):
        """symbol_name(count_packets_sptr self) -> std::string"""
        return _fullduplex_swig.count_packets_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(count_packets_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.count_packets_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(count_packets_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.count_packets_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(count_packets_sptr self) -> long"""
        return _fullduplex_swig.count_packets_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(count_packets_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.count_packets_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(count_packets_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.count_packets_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(count_packets_sptr self) -> std::string"""
        return _fullduplex_swig.count_packets_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(count_packets_sptr self, std::string name)"""
        return _fullduplex_swig.count_packets_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(count_packets_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.count_packets_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(count_packets_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.count_packets_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(count_packets_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.count_packets_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(count_packets_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.count_packets_sptr_message_subscribers(self, which_port)

count_packets_sptr_swigregister = _fullduplex_swig.count_packets_sptr_swigregister
count_packets_sptr_swigregister(count_packets_sptr)


count_packets_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
count_packets = count_packets.make;

class async_divide(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::async_divide.

    To avoid accidental use of raw pointers, fullduplex::async_divide's constructor is in a private implementation class. fullduplex::async_divide::make is the public interface for creating new instances.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """
        make() -> async_divide_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::async_divide.

        To avoid accidental use of raw pointers, fullduplex::async_divide's constructor is in a private implementation class. fullduplex::async_divide::make is the public interface for creating new instances.
        """
        return _fullduplex_swig.async_divide_make()

    make = staticmethod(make)
    __swig_destroy__ = _fullduplex_swig.delete_async_divide
    __del__ = lambda self: None
async_divide_swigregister = _fullduplex_swig.async_divide_swigregister
async_divide_swigregister(async_divide)

def async_divide_make():
    """
    async_divide_make() -> async_divide_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of fullduplex::async_divide.

    To avoid accidental use of raw pointers, fullduplex::async_divide's constructor is in a private implementation class. fullduplex::async_divide::make is the public interface for creating new instances.
    """
    return _fullduplex_swig.async_divide_make()

class async_divide_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::async_divide)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::async_divide)> self) -> async_divide_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::async_divide)> self, async_divide p) -> async_divide_sptr
        """
        this = _fullduplex_swig.new_async_divide_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(async_divide_sptr self) -> async_divide"""
        return _fullduplex_swig.async_divide_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_async_divide_sptr
    __del__ = lambda self: None

    def make(self):
        """
        make(async_divide_sptr self) -> async_divide_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of fullduplex::async_divide.

        To avoid accidental use of raw pointers, fullduplex::async_divide's constructor is in a private implementation class. fullduplex::async_divide::make is the public interface for creating new instances.
        """
        return _fullduplex_swig.async_divide_sptr_make(self)


    def history(self):
        """history(async_divide_sptr self) -> unsigned int"""
        return _fullduplex_swig.async_divide_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(async_divide_sptr self, int which, int delay)
        declare_sample_delay(async_divide_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.async_divide_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(async_divide_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.async_divide_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(async_divide_sptr self) -> int"""
        return _fullduplex_swig.async_divide_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(async_divide_sptr self) -> double"""
        return _fullduplex_swig.async_divide_sptr_relative_rate(self)


    def start(self):
        """start(async_divide_sptr self) -> bool"""
        return _fullduplex_swig.async_divide_sptr_start(self)


    def stop(self):
        """stop(async_divide_sptr self) -> bool"""
        return _fullduplex_swig.async_divide_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(async_divide_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.async_divide_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(async_divide_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.async_divide_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(async_divide_sptr self) -> int"""
        return _fullduplex_swig.async_divide_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(async_divide_sptr self, int m)"""
        return _fullduplex_swig.async_divide_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(async_divide_sptr self)"""
        return _fullduplex_swig.async_divide_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(async_divide_sptr self) -> bool"""
        return _fullduplex_swig.async_divide_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(async_divide_sptr self, int m)"""
        return _fullduplex_swig.async_divide_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(async_divide_sptr self) -> int"""
        return _fullduplex_swig.async_divide_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(async_divide_sptr self, int i) -> long"""
        return _fullduplex_swig.async_divide_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(async_divide_sptr self, long max_output_buffer)
        set_max_output_buffer(async_divide_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.async_divide_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(async_divide_sptr self, int i) -> long"""
        return _fullduplex_swig.async_divide_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(async_divide_sptr self, long min_output_buffer)
        set_min_output_buffer(async_divide_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.async_divide_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(async_divide_sptr self, int which) -> float
        pc_input_buffers_full(async_divide_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.async_divide_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(async_divide_sptr self, int which) -> float
        pc_input_buffers_full_avg(async_divide_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.async_divide_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(async_divide_sptr self, int which) -> float
        pc_input_buffers_full_var(async_divide_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.async_divide_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(async_divide_sptr self, int which) -> float
        pc_output_buffers_full(async_divide_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.async_divide_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(async_divide_sptr self, int which) -> float
        pc_output_buffers_full_avg(async_divide_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.async_divide_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(async_divide_sptr self, int which) -> float
        pc_output_buffers_full_var(async_divide_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.async_divide_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(async_divide_sptr self) -> float"""
        return _fullduplex_swig.async_divide_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(async_divide_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.async_divide_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(async_divide_sptr self)"""
        return _fullduplex_swig.async_divide_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(async_divide_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.async_divide_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(async_divide_sptr self) -> int"""
        return _fullduplex_swig.async_divide_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(async_divide_sptr self) -> int"""
        return _fullduplex_swig.async_divide_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(async_divide_sptr self, int priority) -> int"""
        return _fullduplex_swig.async_divide_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(async_divide_sptr self) -> std::string"""
        return _fullduplex_swig.async_divide_sptr_name(self)


    def symbol_name(self):
        """symbol_name(async_divide_sptr self) -> std::string"""
        return _fullduplex_swig.async_divide_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(async_divide_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.async_divide_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(async_divide_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.async_divide_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(async_divide_sptr self) -> long"""
        return _fullduplex_swig.async_divide_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(async_divide_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.async_divide_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(async_divide_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.async_divide_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(async_divide_sptr self) -> std::string"""
        return _fullduplex_swig.async_divide_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(async_divide_sptr self, std::string name)"""
        return _fullduplex_swig.async_divide_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(async_divide_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.async_divide_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(async_divide_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.async_divide_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(async_divide_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.async_divide_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(async_divide_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.async_divide_sptr_message_subscribers(self, which_port)

async_divide_sptr_swigregister = _fullduplex_swig.async_divide_sptr_swigregister
async_divide_sptr_swigregister(async_divide_sptr)


async_divide_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
async_divide = async_divide.make;

class fde_config(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of sub20fde::fde_config.

    To avoid accidental use of raw pointers, sub20fde::fde_config's constructor is in a private implementation class. sub20fde::fde_config::make is the public interface for creating new instances.

    Args:
        tuner_cap_addr : 
        tuner_cap_val : 
        sn_val : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(tuner_cap_addr, tuner_cap_val, sn_val):
        """
        make(int tuner_cap_addr, int tuner_cap_val, char * sn_val) -> fde_config_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of sub20fde::fde_config.

        To avoid accidental use of raw pointers, sub20fde::fde_config's constructor is in a private implementation class. sub20fde::fde_config::make is the public interface for creating new instances.

        Args:
            tuner_cap_addr : 
            tuner_cap_val : 
            sn_val : 
        """
        return _fullduplex_swig.fde_config_make(tuner_cap_addr, tuner_cap_val, sn_val)

    make = staticmethod(make)

    def fde_config_find_dev(self, serial):
        """fde_config_find_dev(fde_config self, char * serial)"""
        return _fullduplex_swig.fde_config_fde_config_find_dev(self, serial)


    def set_canc_path(self, val):
        """set_canc_path(fde_config self, int val)"""
        return _fullduplex_swig.fde_config_set_canc_path(self, val)


    def set_att(self, addr, val):
        """set_att(fde_config self, int addr, int val)"""
        return _fullduplex_swig.fde_config_set_att(self, addr, val)


    def set_dac(self, addr, val):
        """set_dac(fde_config self, int addr, int val)"""
        return _fullduplex_swig.fde_config_set_dac(self, addr, val)


    def set_cf_cap(self, addr, val):
        """set_cf_cap(fde_config self, int addr, int val)"""
        return _fullduplex_swig.fde_config_set_cf_cap(self, addr, val)


    def set_qf_cap(self, addr, val):
        """set_qf_cap(fde_config self, int addr, int val)"""
        return _fullduplex_swig.fde_config_set_qf_cap(self, addr, val)


    def set_tuner_cap(self, addr, val):
        """set_tuner_cap(fde_config self, int addr, int val)"""
        return _fullduplex_swig.fde_config_set_tuner_cap(self, addr, val)


    def set_all(self, att_0_val, att_1_val, att_2_val, cf_cap_0_val, cf_cap_1_val, qf_cap_0_val, qf_cap_1_val, dac_0_val, dac_1_val, dac_2_val, canc_path_val, tuner_cap_0_val, tuner_cap_1_val, tuner_cap_2_val):
        """set_all(fde_config self, int att_0_val, int att_1_val, int att_2_val, int cf_cap_0_val, int cf_cap_1_val, int qf_cap_0_val, int qf_cap_1_val, int dac_0_val, int dac_1_val, int dac_2_val, int canc_path_val, int tuner_cap_0_val, int tuner_cap_1_val, int tuner_cap_2_val)"""
        return _fullduplex_swig.fde_config_set_all(self, att_0_val, att_1_val, att_2_val, cf_cap_0_val, cf_cap_1_val, qf_cap_0_val, qf_cap_1_val, dac_0_val, dac_1_val, dac_2_val, canc_path_val, tuner_cap_0_val, tuner_cap_1_val, tuner_cap_2_val)

    __swig_destroy__ = _fullduplex_swig.delete_fde_config
    __del__ = lambda self: None
fde_config_swigregister = _fullduplex_swig.fde_config_swigregister
fde_config_swigregister(fde_config)

def fde_config_make(tuner_cap_addr, tuner_cap_val, sn_val):
    """
    fde_config_make(int tuner_cap_addr, int tuner_cap_val, char * sn_val) -> fde_config_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of sub20fde::fde_config.

    To avoid accidental use of raw pointers, sub20fde::fde_config's constructor is in a private implementation class. sub20fde::fde_config::make is the public interface for creating new instances.

    Args:
        tuner_cap_addr : 
        tuner_cap_val : 
        sn_val : 
    """
    return _fullduplex_swig.fde_config_make(tuner_cap_addr, tuner_cap_val, sn_val)

class fde_config_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::fde_config)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::fde_config)> self) -> fde_config_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::fde_config)> self, fde_config p) -> fde_config_sptr
        """
        this = _fullduplex_swig.new_fde_config_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(fde_config_sptr self) -> fde_config"""
        return _fullduplex_swig.fde_config_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_fde_config_sptr
    __del__ = lambda self: None

    def make(self, tuner_cap_addr, tuner_cap_val, sn_val):
        """
        make(fde_config_sptr self, int tuner_cap_addr, int tuner_cap_val, char * sn_val) -> fde_config_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of sub20fde::fde_config.

        To avoid accidental use of raw pointers, sub20fde::fde_config's constructor is in a private implementation class. sub20fde::fde_config::make is the public interface for creating new instances.

        Args:
            tuner_cap_addr : 
            tuner_cap_val : 
            sn_val : 
        """
        return _fullduplex_swig.fde_config_sptr_make(self, tuner_cap_addr, tuner_cap_val, sn_val)


    def fde_config_find_dev(self, serial):
        """fde_config_find_dev(fde_config_sptr self, char * serial)"""
        return _fullduplex_swig.fde_config_sptr_fde_config_find_dev(self, serial)


    def set_canc_path(self, val):
        """set_canc_path(fde_config_sptr self, int val)"""
        return _fullduplex_swig.fde_config_sptr_set_canc_path(self, val)


    def set_att(self, addr, val):
        """set_att(fde_config_sptr self, int addr, int val)"""
        return _fullduplex_swig.fde_config_sptr_set_att(self, addr, val)


    def set_dac(self, addr, val):
        """set_dac(fde_config_sptr self, int addr, int val)"""
        return _fullduplex_swig.fde_config_sptr_set_dac(self, addr, val)


    def set_cf_cap(self, addr, val):
        """set_cf_cap(fde_config_sptr self, int addr, int val)"""
        return _fullduplex_swig.fde_config_sptr_set_cf_cap(self, addr, val)


    def set_qf_cap(self, addr, val):
        """set_qf_cap(fde_config_sptr self, int addr, int val)"""
        return _fullduplex_swig.fde_config_sptr_set_qf_cap(self, addr, val)


    def set_tuner_cap(self, addr, val):
        """set_tuner_cap(fde_config_sptr self, int addr, int val)"""
        return _fullduplex_swig.fde_config_sptr_set_tuner_cap(self, addr, val)


    def set_all(self, att_0_val, att_1_val, att_2_val, cf_cap_0_val, cf_cap_1_val, qf_cap_0_val, qf_cap_1_val, dac_0_val, dac_1_val, dac_2_val, canc_path_val, tuner_cap_0_val, tuner_cap_1_val, tuner_cap_2_val):
        """set_all(fde_config_sptr self, int att_0_val, int att_1_val, int att_2_val, int cf_cap_0_val, int cf_cap_1_val, int qf_cap_0_val, int qf_cap_1_val, int dac_0_val, int dac_1_val, int dac_2_val, int canc_path_val, int tuner_cap_0_val, int tuner_cap_1_val, int tuner_cap_2_val)"""
        return _fullduplex_swig.fde_config_sptr_set_all(self, att_0_val, att_1_val, att_2_val, cf_cap_0_val, cf_cap_1_val, qf_cap_0_val, qf_cap_1_val, dac_0_val, dac_1_val, dac_2_val, canc_path_val, tuner_cap_0_val, tuner_cap_1_val, tuner_cap_2_val)


    def history(self):
        """history(fde_config_sptr self) -> unsigned int"""
        return _fullduplex_swig.fde_config_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fde_config_sptr self, int which, int delay)
        declare_sample_delay(fde_config_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.fde_config_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(fde_config_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.fde_config_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(fde_config_sptr self) -> int"""
        return _fullduplex_swig.fde_config_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(fde_config_sptr self) -> double"""
        return _fullduplex_swig.fde_config_sptr_relative_rate(self)


    def start(self):
        """start(fde_config_sptr self) -> bool"""
        return _fullduplex_swig.fde_config_sptr_start(self)


    def stop(self):
        """stop(fde_config_sptr self) -> bool"""
        return _fullduplex_swig.fde_config_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(fde_config_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.fde_config_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(fde_config_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.fde_config_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(fde_config_sptr self) -> int"""
        return _fullduplex_swig.fde_config_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(fde_config_sptr self, int m)"""
        return _fullduplex_swig.fde_config_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fde_config_sptr self)"""
        return _fullduplex_swig.fde_config_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fde_config_sptr self) -> bool"""
        return _fullduplex_swig.fde_config_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(fde_config_sptr self, int m)"""
        return _fullduplex_swig.fde_config_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(fde_config_sptr self) -> int"""
        return _fullduplex_swig.fde_config_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(fde_config_sptr self, int i) -> long"""
        return _fullduplex_swig.fde_config_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fde_config_sptr self, long max_output_buffer)
        set_max_output_buffer(fde_config_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.fde_config_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(fde_config_sptr self, int i) -> long"""
        return _fullduplex_swig.fde_config_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fde_config_sptr self, long min_output_buffer)
        set_min_output_buffer(fde_config_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.fde_config_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fde_config_sptr self, int which) -> float
        pc_input_buffers_full(fde_config_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.fde_config_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fde_config_sptr self, int which) -> float
        pc_input_buffers_full_avg(fde_config_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.fde_config_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fde_config_sptr self, int which) -> float
        pc_input_buffers_full_var(fde_config_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.fde_config_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fde_config_sptr self, int which) -> float
        pc_output_buffers_full(fde_config_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.fde_config_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fde_config_sptr self, int which) -> float
        pc_output_buffers_full_avg(fde_config_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.fde_config_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fde_config_sptr self, int which) -> float
        pc_output_buffers_full_var(fde_config_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.fde_config_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(fde_config_sptr self) -> float"""
        return _fullduplex_swig.fde_config_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(fde_config_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.fde_config_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(fde_config_sptr self)"""
        return _fullduplex_swig.fde_config_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(fde_config_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.fde_config_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(fde_config_sptr self) -> int"""
        return _fullduplex_swig.fde_config_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(fde_config_sptr self) -> int"""
        return _fullduplex_swig.fde_config_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(fde_config_sptr self, int priority) -> int"""
        return _fullduplex_swig.fde_config_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(fde_config_sptr self) -> std::string"""
        return _fullduplex_swig.fde_config_sptr_name(self)


    def symbol_name(self):
        """symbol_name(fde_config_sptr self) -> std::string"""
        return _fullduplex_swig.fde_config_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(fde_config_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.fde_config_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(fde_config_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.fde_config_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(fde_config_sptr self) -> long"""
        return _fullduplex_swig.fde_config_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(fde_config_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.fde_config_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(fde_config_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.fde_config_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(fde_config_sptr self) -> std::string"""
        return _fullduplex_swig.fde_config_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(fde_config_sptr self, std::string name)"""
        return _fullduplex_swig.fde_config_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(fde_config_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.fde_config_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(fde_config_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.fde_config_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(fde_config_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.fde_config_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(fde_config_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.fde_config_sptr_message_subscribers(self, which_port)

fde_config_sptr_swigregister = _fullduplex_swig.fde_config_sptr_swigregister
fde_config_sptr_swigregister(fde_config_sptr)


fde_config_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fde_config = fde_config.make;

class sub20_init(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of subdev::sub20_init.

    To avoid accidental use of raw pointers, subdev::sub20_init's constructor is in a private implementation class. subdev::sub20_init::make is the public interface for creating new instances.

    Args:
        phase_code : 
        atten_code : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(phase_code, atten_code):
        """
        make(int phase_code, int atten_code) -> sub20_init_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of subdev::sub20_init.

        To avoid accidental use of raw pointers, subdev::sub20_init's constructor is in a private implementation class. subdev::sub20_init::make is the public interface for creating new instances.

        Args:
            phase_code : 
            atten_code : 
        """
        return _fullduplex_swig.sub20_init_make(phase_code, atten_code)

    make = staticmethod(make)

    def set_atten_code(self, code):
        """set_atten_code(sub20_init self, int code)"""
        return _fullduplex_swig.sub20_init_set_atten_code(self, code)


    def set_phase_code(self, code):
        """set_phase_code(sub20_init self, int code)"""
        return _fullduplex_swig.sub20_init_set_phase_code(self, code)

    __swig_destroy__ = _fullduplex_swig.delete_sub20_init
    __del__ = lambda self: None
sub20_init_swigregister = _fullduplex_swig.sub20_init_swigregister
sub20_init_swigregister(sub20_init)

def sub20_init_make(phase_code, atten_code):
    """
    sub20_init_make(int phase_code, int atten_code) -> sub20_init_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of subdev::sub20_init.

    To avoid accidental use of raw pointers, subdev::sub20_init's constructor is in a private implementation class. subdev::sub20_init::make is the public interface for creating new instances.

    Args:
        phase_code : 
        atten_code : 
    """
    return _fullduplex_swig.sub20_init_make(phase_code, atten_code)

class sub20_init_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fullduplex::sub20_init)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::fullduplex::sub20_init)> self) -> sub20_init_sptr
        __init__(boost::shared_ptr<(gr::fullduplex::sub20_init)> self, sub20_init p) -> sub20_init_sptr
        """
        this = _fullduplex_swig.new_sub20_init_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(sub20_init_sptr self) -> sub20_init"""
        return _fullduplex_swig.sub20_init_sptr___deref__(self)

    __swig_destroy__ = _fullduplex_swig.delete_sub20_init_sptr
    __del__ = lambda self: None

    def make(self, phase_code, atten_code):
        """
        make(sub20_init_sptr self, int phase_code, int atten_code) -> sub20_init_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of subdev::sub20_init.

        To avoid accidental use of raw pointers, subdev::sub20_init's constructor is in a private implementation class. subdev::sub20_init::make is the public interface for creating new instances.

        Args:
            phase_code : 
            atten_code : 
        """
        return _fullduplex_swig.sub20_init_sptr_make(self, phase_code, atten_code)


    def set_atten_code(self, code):
        """set_atten_code(sub20_init_sptr self, int code)"""
        return _fullduplex_swig.sub20_init_sptr_set_atten_code(self, code)


    def set_phase_code(self, code):
        """set_phase_code(sub20_init_sptr self, int code)"""
        return _fullduplex_swig.sub20_init_sptr_set_phase_code(self, code)


    def history(self):
        """history(sub20_init_sptr self) -> unsigned int"""
        return _fullduplex_swig.sub20_init_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sub20_init_sptr self, int which, int delay)
        declare_sample_delay(sub20_init_sptr self, unsigned int delay)
        """
        return _fullduplex_swig.sub20_init_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(sub20_init_sptr self, int which) -> unsigned int"""
        return _fullduplex_swig.sub20_init_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(sub20_init_sptr self) -> int"""
        return _fullduplex_swig.sub20_init_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(sub20_init_sptr self) -> double"""
        return _fullduplex_swig.sub20_init_sptr_relative_rate(self)


    def start(self):
        """start(sub20_init_sptr self) -> bool"""
        return _fullduplex_swig.sub20_init_sptr_start(self)


    def stop(self):
        """stop(sub20_init_sptr self) -> bool"""
        return _fullduplex_swig.sub20_init_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(sub20_init_sptr self, unsigned int which_input) -> uint64_t"""
        return _fullduplex_swig.sub20_init_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(sub20_init_sptr self, unsigned int which_output) -> uint64_t"""
        return _fullduplex_swig.sub20_init_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(sub20_init_sptr self) -> int"""
        return _fullduplex_swig.sub20_init_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(sub20_init_sptr self, int m)"""
        return _fullduplex_swig.sub20_init_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sub20_init_sptr self)"""
        return _fullduplex_swig.sub20_init_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sub20_init_sptr self) -> bool"""
        return _fullduplex_swig.sub20_init_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(sub20_init_sptr self, int m)"""
        return _fullduplex_swig.sub20_init_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(sub20_init_sptr self) -> int"""
        return _fullduplex_swig.sub20_init_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(sub20_init_sptr self, int i) -> long"""
        return _fullduplex_swig.sub20_init_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sub20_init_sptr self, long max_output_buffer)
        set_max_output_buffer(sub20_init_sptr self, int port, long max_output_buffer)
        """
        return _fullduplex_swig.sub20_init_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(sub20_init_sptr self, int i) -> long"""
        return _fullduplex_swig.sub20_init_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sub20_init_sptr self, long min_output_buffer)
        set_min_output_buffer(sub20_init_sptr self, int port, long min_output_buffer)
        """
        return _fullduplex_swig.sub20_init_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sub20_init_sptr self, int which) -> float
        pc_input_buffers_full(sub20_init_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.sub20_init_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sub20_init_sptr self, int which) -> float
        pc_input_buffers_full_avg(sub20_init_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.sub20_init_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sub20_init_sptr self, int which) -> float
        pc_input_buffers_full_var(sub20_init_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.sub20_init_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sub20_init_sptr self, int which) -> float
        pc_output_buffers_full(sub20_init_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.sub20_init_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sub20_init_sptr self, int which) -> float
        pc_output_buffers_full_avg(sub20_init_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.sub20_init_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sub20_init_sptr self, int which) -> float
        pc_output_buffers_full_var(sub20_init_sptr self) -> pmt_vector_float
        """
        return _fullduplex_swig.sub20_init_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(sub20_init_sptr self) -> float"""
        return _fullduplex_swig.sub20_init_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(sub20_init_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fullduplex_swig.sub20_init_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(sub20_init_sptr self)"""
        return _fullduplex_swig.sub20_init_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(sub20_init_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fullduplex_swig.sub20_init_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(sub20_init_sptr self) -> int"""
        return _fullduplex_swig.sub20_init_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(sub20_init_sptr self) -> int"""
        return _fullduplex_swig.sub20_init_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(sub20_init_sptr self, int priority) -> int"""
        return _fullduplex_swig.sub20_init_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(sub20_init_sptr self) -> std::string"""
        return _fullduplex_swig.sub20_init_sptr_name(self)


    def symbol_name(self):
        """symbol_name(sub20_init_sptr self) -> std::string"""
        return _fullduplex_swig.sub20_init_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(sub20_init_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.sub20_init_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(sub20_init_sptr self) -> io_signature_sptr"""
        return _fullduplex_swig.sub20_init_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(sub20_init_sptr self) -> long"""
        return _fullduplex_swig.sub20_init_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(sub20_init_sptr self) -> basic_block_sptr"""
        return _fullduplex_swig.sub20_init_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(sub20_init_sptr self, int ninputs, int noutputs) -> bool"""
        return _fullduplex_swig.sub20_init_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(sub20_init_sptr self) -> std::string"""
        return _fullduplex_swig.sub20_init_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(sub20_init_sptr self, std::string name)"""
        return _fullduplex_swig.sub20_init_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(sub20_init_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fullduplex_swig.sub20_init_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(sub20_init_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.sub20_init_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(sub20_init_sptr self) -> swig_int_ptr"""
        return _fullduplex_swig.sub20_init_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(sub20_init_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fullduplex_swig.sub20_init_sptr_message_subscribers(self, which_port)

sub20_init_sptr_swigregister = _fullduplex_swig.sub20_init_sptr_swigregister
sub20_init_sptr_swigregister(sub20_init_sptr)


sub20_init_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub20_init = sub20_init.make;



